/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import Controller.ActualizarLoginCon;
import Controller.HistorialVentasControlador;
import Controller.ProductorControlador;
import DTO.Productor;
import java.awt.print.PrinterException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import DTO.Historial_ventas;
import DTO.UsuarioLogin;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.text.MessageFormat;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableModel;

/**
 *
 * @author Windows 7
 */
public class Historialventas extends javax.swing.JFrame {

    ProductorControlador prc = new ProductorControlador();
    HistorialVentasControlador hvc = new HistorialVentasControlador();
    ActualizarLoginCon alc = new ActualizarLoginCon();
    UsuarioLogin ulog = new UsuarioLogin();
    //DefaultComboBoxModel modelListaProductores = new DefaultComboBoxModel(prc.listaProductores().toArray());
    /**
     * DefaultComboBoxModel modelListaProductores = new
     * DefaultComboBoxModel(prc.listaProductores().toArray()); Creates new form
     * Historial_ventas
     */
    public Historialventas(UsuarioLogin log) {
        ulog = log;
        alc.actualizarLogin(ulog);
        initComponents();

        ArrayList<Productor> arrpro = prc.listaProductores();
        for (int i = 0; i < arrpro.size(); i++) {
            cmbListarproductores.addItem(arrpro.get(i));
        }

        tbVentas.setAutoCreateRowSorter(true);
        tbVentas.getTableHeader().setReorderingAllowed(false);
    }

//    Nombre del producto
//Tipo (Es el tipo de producto)
//Tipo de unidad
//Precio (Es el precio por unidad)
//Cantidad (Es la cantidad comprada)
//Precio Final
//N° de venta
//Cliente
    String col[] = {"Nombre Producto", "Tipo de Producto", "Tipo de Unidad", "Precio Unitario", "Cantidad", "Total", "Nº Venta", "Cliente"};
    DefaultTableModel tablemodel = new DefaultTableModel(col, 0);

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        cmbListarproductores = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbVentas = new javax.swing.JTable();
        btnVolver = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnPdf = new javax.swing.JButton();
        btnExcel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cmbListarproductores.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione" }));
        cmbListarproductores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbListarproductoresActionPerformed(evt);
            }
        });

        jLabel2.setText("PRODUCTORES");

        tbVentas.setModel(tablemodel);
        jScrollPane1.setViewportView(tbVentas);

        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        btnImprimir.setText("Imprimir");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnPdf.setText("Exportar a PDF");
        btnPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPdfActionPerformed(evt);
            }
        });

        btnExcel.setText("Exportar a Excel");
        btnExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbListarproductores, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnPdf, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(btnExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)))
                .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbListarproductores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 418, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImprimir)
                    .addComponent(btnVolver)
                    .addComponent(btnPdf)
                    .addComponent(btnExcel))
                .addGap(30, 30, 30))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(53, 53, 53)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(81, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbListarproductoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbListarproductoresActionPerformed
        // TODO add your handling code here:
        Productor pro = ((Productor) cmbListarproductores.getSelectedItem());
        this.fillTable(pro.getRut());

    }//GEN-LAST:event_cmbListarproductoresActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        // Cierra la ventana y vuelve al menú:
        alc.actualizarLogin(ulog);
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        alc.actualizarLogin(ulog);
        try {
            // Imprime la tabla:
            MessageFormat header = new MessageFormat("Ventas");
            MessageFormat footer = new MessageFormat("Page {0,number,integer}");
            tbVentas.print(JTable.PrintMode.FIT_WIDTH, header, footer);
        } catch (PrinterException ex) {
            Logger.getLogger(ManProductosProductor.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPdfActionPerformed
        // Genera un objeto de tipo documento y lo convierte en PDF:
        alc.actualizarLogin(ulog);
        try {
            Document doc = new Document();
            int returnVal = fileChooser.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                if (!fileChooser.getSelectedFile().getAbsolutePath().endsWith("pdf")) {
                    file = new File(fileChooser.getSelectedFile() + "." + "pdf");
                }
                PdfWriter.getInstance(doc, new FileOutputStream(file));
                doc.open();
                Font fontbold = FontFactory.getFont("Helvetica", 26, Font.BOLD);
                Paragraph p = new Paragraph("Historial de ventas", fontbold);
                p.setSpacingAfter(20);
                p.setAlignment(1); // Center
                doc.add(p);
                PdfPTable pdfTable = new PdfPTable(tbVentas.getColumnCount());
                //adding table headers
                for (int i = 0; i < tbVentas.getColumnCount(); i++) {
                    pdfTable.addCell(tbVentas.getColumnName(i));
                }
                //Extrae los datos de la tabla y los agrega al documento PDF.
                Font fontH1 = FontFactory.getFont("Helvetica", 10, Font.NORMAL);
                for (int rows = 0; rows < tbVentas.getRowCount() - 1; rows++) {
                    for (int cols = 0; cols < tbVentas.getColumnCount(); cols++) {
                        pdfTable.addCell(new Phrase(tbVentas.getModel().getValueAt(rows, cols).toString(), fontH1));

                    }
                }
                doc.add(pdfTable);
                doc.close();
                JOptionPane.showMessageDialog(this, "PDF creado exitosamente");
            }
        } catch (DocumentException ex) {
            Logger.getLogger(Historialventas.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Problema al crear documento: " + ex.getMessage());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Historialventas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPdfActionPerformed

    private void btnExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelActionPerformed
        // Solicita un nombre de archivo y genera un libro de MS Excel con los 
        // datos de la tabla 
        alc.actualizarLogin(ulog);
        try {
            int returnVal = fileChooser.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                if (!fileChooser.getSelectedFile().getAbsolutePath().endsWith("xls")) {
                    file = new File(fileChooser.getSelectedFile() + "." + "xls");
                }
                TableModel model = tbVentas.getModel();
                FileWriter excel = new FileWriter(file);

                for (int i = 0; i < model.getColumnCount(); i++) {
                    excel.write(model.getColumnName(i) + "\t");
                }

                excel.write("\n");

                for (int i = 0; i < model.getRowCount(); i++) {
                    for (int j = 0; j < model.getColumnCount(); j++) {
                        excel.write(model.getValueAt(i, j).toString() + "\t");
                    }
                    excel.write("\n");
                }

                excel.close();
                JOptionPane.showMessageDialog(this, "Libro de Excel creado exitosamente");
            }
        } catch (IOException e) {
            // Si existe un error al crear el documento o este se encuentra ocupado
            // muestra un error
            System.out.println(e);
            JOptionPane.showMessageDialog(this, "Hubo un problema al crear documento: " + e.getMessage());
        }
    }//GEN-LAST:event_btnExcelActionPerformed

    private void fillTable(String rut) {
        // Llena la tabla. Por ahora el contenido no incluye los nombres, sólo IDs.
        if (hvc.listaVentas(rut).size() > 0) {
            for (int i = 0; i < hvc.listaVentas(rut).size(); i++) {
                Historial_ventas vent = hvc.listaVentas(rut).get(i);
                String[] linea = {vent.getNombre_producto(),
                    vent.getTipo_producto(),
                    vent.getTipo_unidad(),
                    vent.getPrecio_unitario(),
                    vent.getCantidad(),
                    vent.getPrecio_final(),
                    vent.getNum_venta(),
                    vent.getNombre_cliente()
                };
                tablemodel.addRow(linea);
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExcel;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnPdf;
    private javax.swing.JButton btnVolver;
    private javax.swing.JComboBox cmbListarproductores;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbVentas;
    // End of variables declaration//GEN-END:variables
}
